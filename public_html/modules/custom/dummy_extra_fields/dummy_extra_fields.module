<?php

/**
 * @file
 * Main file for hooks and custom functions.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\NodeType;

use Drupal\user\UserInterface;

use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_entity_extra_field_info().
 */
function dummy_extra_fields_entity_extra_field_info() {


  dpm('admin/structure/types/manage/article/form-display');



  $extra = [];

  //  получаем все типы (бандлы) сущности node и добавляем в массив псевдо-полей по 2 поля на каждый тип материала


  foreach (NodeType::loadMultiple() as $bundle) {

    $extra['node'][$bundle->id()]['display']['estimated_read_time'] = [
      'label' => t('Estimated read time'),
      'description' => t('Calculate estimated read time'),
      'weight' => 100,
      'visible' => FALSE,
    ];

    $extra['node'][$bundle->id()]['form']['simple_captcha'] = [
      'label' => t('Simple captcha'),
      'weight' => 100,
    ];
  }

  $extra['node']['article']['display']['extra_article_test'] = [
    'label' => new TranslatableMarkup('extra article test'),
    'description' => new TranslatableMarkup('Prints "extra article test" string.'),
  ];

  $extra['node']['article']['form']['extra_article_test'] = [
    'label' => t('extra article test'),
    'weight' => 100,
  ];


  $extra['user']['user']['display']['extra_user_test'] = [
    'label' => t('extra user test'),
    'weight' => 50,
  ];

  $extra['user']['user']['form']['extra_user_test'] = [
    'label' => t('extra user test'),
    'weight' => 50,
  ];




//  $extra['node']['article']['display']['extra_article_country'] = [
//    'label' => new TranslatableMarkup('extra article country'),
//    'description' => new TranslatableMarkup('Prints "extra article test" string.'),
//  ];

  $extra['node']['article']['form']['extra_article_country'] = [
    'label' => t('extra article country'),
    'weight' => 100,
  ];







  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function dummy_extra_fields_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

//  Мы подключаемся только к нодам, и на этапе подготовки отображения материала, пытаемся получить компонент estimated_read_time
  if ($display->getComponent('estimated_read_time') && $entity->hasField('body')) {

    if ($entity->body->isEmpty()) {
      $value = t("Can't be calculated because body field is empty");
    }
    else {
      // Average word per minute reading for all languages.
      // @see https://en.wikipedia.org/wiki/Words_per_minute
      $word_per_minute = 184;
      $word_count = str_word_count(strip_tags($entity->body->value));
      $estimated_read_time = floor(($word_count / $word_per_minute) * 60);
      $value = \Drupal::translation()
        ->formatPlural($estimated_read_time, '1 second', '@count seconds');
    }

    $build['estimated_read_time'] = [
      '#type' => 'markup',
      '#markup' => "<p><strong>ERT:</strong> {$value}</p>",
    ];
  }

  if ($display->getComponent('extra_article_test')) {
    $build['extra_article_test'] = [
      '#type' => 'markup',
      '#markup' => 'extra article test - Псевдо-поля (экстра-поля!!!)',
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dummy_extra_fields_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $storage = $form_state->getStorage();
  if (!empty($storage['form_display']) && $storage['form_display'] instanceof EntityFormDisplay) {
    $form_display = $storage['form_display'];


//    dpm($form_display);

    if ($component = $form_display->getComponent('simple_captcha')) {

      $form['simple_captcha'] = [
        '#type' => 'textfield',
        '#title' => t('Simple captcha'),
        '#default_value' => t('Empty this field to submit the form'),
        '#weight' => $component['weight'],
      ];
      $form['#validate'][] = '_dummy_extra_fields_simple_captcha_validation';
    }




    if ($component2 = $form_display->getComponent('extra_article_test')) {

      $form['extra_article_test'] = [
        '#type' => 'textfield',
        '#title' => t('extra article test'),
        '#default_value' => t('fgdfgdf'),
        '#weight' => $component2['weight'],
      ];

    }

    if ($component3 = $form_display->getComponent('extra_article_country')) {

      $form['extra_article_country'] = [
        '#type' => 'textfield',
        '#title' => t('extra article country'),
        '#default_value' => t('country extra'),
        '#weight' => $component3['weight'],
      ];

    }


  }


}

/**
 * Validation for captcha.
 */
function _dummy_extra_fields_simple_captcha_validation(&$form, FormStateInterface $form_state) {
  if (strlen($form_state->getValue('simple_captcha'))) {
    $form_state->setError($form['simple_captcha'], t("You don't pass captcha validation"));
  }
}



/*****************user*****************/



/**
 * Implements hook_form_alter().
 */
function dummy_extra_fields_form_alter(&$form, FormStateInterface $form_state, $form_id) {

//

  if($form_id == 'user_form'){


      dpm('user/1/edit');


    $storage = $form_state->getStorage();
    if (!empty($storage['form_display']) && $storage['form_display'] instanceof EntityFormDisplay) {

      $form_display = $storage['form_display'];
      if ($extra_user_test = $form_display->getComponent('extra_user_test')) {

        $form['extra_user_test'] = [
          '#type' => 'textfield',
          '#title' => t('extra_user_test'),
          '#default_value' => t('extra_user_test'),
          '#weight' => $extra_user_test['weight'],
        ];



      }


    }

//    if (!empty($storage['form_display']) && $storage['form_display'] instanceof EntityFormDisplay) {
//      $form_display = $storage['form_display'];
//
//
//
//
//      if ($component = $form_display->getComponent('simple_captcha')) {
//
//        $form['simple_captcha'] = [
//          '#type' => 'textfield',
//          '#title' => t('Simple captcha'),
//          '#default_value' => t('Empty this field to submit the form'),
//          '#weight' => $component['weight'],
//        ];
//        $form['#validate'][] = '_dummy_extra_fields_simple_captcha_validation';
//      }
//    }


  }

  if ($form_id == 'user_register_form') {
     dpm($form_id);
  }

}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function dummy_extra_fields_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {


//  dpm('path = /user/1');

//  dpm($entity);

}

